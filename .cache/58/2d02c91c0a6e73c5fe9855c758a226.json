{"id":"../../node_modules/stripe/lib/Error.js","dependencies":[{"name":"D:\\Programing\\starter\\package.json","includedInParent":true,"mtime":1745002180389},{"name":"D:\\Programing\\starter\\node_modules\\stripe\\package.json","includedInParent":true,"mtime":1745002180303},{"name":"./utils","loc":{"line":3,"column":22,"index":37},"parent":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\Error.js","resolved":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\utils.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./utils');\nmodule.exports = _Error;\n\n/**\n * Generic Error klass to wrap any errors returned by stripe-node\n */\nfunction _Error(raw) {\n  this.populate.apply(this, arguments);\n  this.stack = new Error(this.message).stack;\n}\n\n// Extend Native Error\n_Error.prototype = Object.create(Error.prototype);\n_Error.prototype.type = 'GenericError';\n_Error.prototype.populate = function (type, message) {\n  this.type = type;\n  this.message = message;\n};\n_Error.extend = utils.protoExtend;\n\n/**\n * Create subclass of internal Error klass\n * (Specifically for errors returned from Stripe's REST API)\n */\nvar StripeError = _Error.StripeError = _Error.extend({\n  type: 'StripeError',\n  populate: function (raw) {\n    // Move from prototype def (so it appears in stringified obj)\n    this.type = this.type;\n    this.stack = new Error(raw.message).stack;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.message = raw.message;\n    this.detail = raw.detail;\n    this.raw = raw;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n  }\n});\n\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\nStripeError.generate = function (rawStripeError) {\n  switch (rawStripeError.type) {\n    case 'card_error':\n      return new _Error.StripeCardError(rawStripeError);\n    case 'invalid_request_error':\n      return new _Error.StripeInvalidRequestError(rawStripeError);\n    case 'api_error':\n      return new _Error.StripeAPIError(rawStripeError);\n    case 'idempotency_error':\n      return new _Error.StripeIdempotencyError(rawStripeError);\n    case 'invalid_grant':\n      return new _Error.StripeInvalidGrantError(rawStripeError);\n  }\n  return new _Error('Generic', 'Unknown Error');\n};\n\n// Specific Stripe Error types:\n_Error.StripeCardError = StripeError.extend({\n  type: 'StripeCardError'\n});\n_Error.StripeInvalidRequestError = StripeError.extend({\n  type: 'StripeInvalidRequestError'\n});\n_Error.StripeAPIError = StripeError.extend({\n  type: 'StripeAPIError'\n});\n_Error.StripeAuthenticationError = StripeError.extend({\n  type: 'StripeAuthenticationError'\n});\n_Error.StripePermissionError = StripeError.extend({\n  type: 'StripePermissionError'\n});\n_Error.StripeRateLimitError = StripeError.extend({\n  type: 'StripeRateLimitError'\n});\n_Error.StripeConnectionError = StripeError.extend({\n  type: 'StripeConnectionError'\n});\n_Error.StripeSignatureVerificationError = StripeError.extend({\n  type: 'StripeSignatureVerificationError'\n});\n_Error.StripeIdempotencyError = StripeError.extend({\n  type: 'StripeIdempotencyError'\n});\n_Error.StripeInvalidGrantError = StripeError.extend({\n  type: 'StripeInvalidGrantError'\n});"},"sourceMaps":null,"error":null,"hash":"30ece2e6486a02a51ce5c9822dfae20e","cacheData":{"env":{}}}