{"id":"../../node_modules/side-channel-map/index.js","dependencies":[{"name":"D:\\Programing\\starter\\package.json","includedInParent":true,"mtime":1745002180389},{"name":"D:\\Programing\\starter\\node_modules\\side-channel-map\\package.json","includedInParent":true,"mtime":1736195168000},{"name":"get-intrinsic","loc":{"line":3,"column":27,"index":42},"parent":"D:\\Programing\\starter\\node_modules\\side-channel-map\\index.js","resolved":"D:\\Programing\\starter\\node_modules\\get-intrinsic\\index.js"},{"name":"call-bound","loc":{"line":4,"column":24,"index":84},"parent":"D:\\Programing\\starter\\node_modules\\side-channel-map\\index.js","resolved":"D:\\Programing\\starter\\node_modules\\call-bound\\index.js"},{"name":"object-inspect","loc":{"line":5,"column":22,"index":121},"parent":"D:\\Programing\\starter\\node_modules\\side-channel-map\\index.js","resolved":"D:\\Programing\\starter\\node_modules\\object-inspect\\index.js"},{"name":"es-errors/type","loc":{"line":7,"column":25,"index":166},"parent":"D:\\Programing\\starter\\node_modules\\side-channel-map\\index.js","resolved":"D:\\Programing\\starter\\node_modules\\es-errors\\type.js"}],"generated":{"js":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar inspect = require('object-inspect');\nvar $TypeError = require('es-errors/type');\nvar $Map = GetIntrinsic('%Map%', true);\n\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\nvar $mapSize = callBound('Map.prototype.size', true);\n\n/** @type {import('.')} */\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */function getSideChannelMap() {\n  /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n  /** @typedef {Parameters<Channel['get']>[0]} K */\n  /** @typedef {Parameters<Channel['set']>[1]} V */\n\n  /** @type {Map<K, V> | undefined} */var $m;\n\n  /** @type {Channel} */\n  var channel = {\n    assert: function (key) {\n      if (!channel.has(key)) {\n        throw new $TypeError('Side channel does not contain ' + inspect(key));\n      }\n    },\n    'delete': function (key) {\n      if ($m) {\n        var result = $mapDelete($m, key);\n        if ($mapSize($m) === 0) {\n          $m = void undefined;\n        }\n        return result;\n      }\n      return false;\n    },\n    get: function (key) {\n      // eslint-disable-line consistent-return\n      if ($m) {\n        return $mapGet($m, key);\n      }\n    },\n    has: function (key) {\n      if ($m) {\n        return $mapHas($m, key);\n      }\n      return false;\n    },\n    set: function (key, value) {\n      if (!$m) {\n        // @ts-expect-error TS can't handle narrowing a variable inside a closure\n        $m = new $Map();\n      }\n      $mapSet($m, key, value);\n    }\n  };\n\n  // @ts-expect-error TODO: figure out why TS is erroring here\n  return channel;\n};"},"sourceMaps":null,"error":null,"hash":"7a6e82d9a6ef4296b08e12beeffc573b","cacheData":{"env":{}}}