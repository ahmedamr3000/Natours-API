{"id":"../../node_modules/stripe/lib/makeRequest.js","dependencies":[{"name":"D:\\Programing\\starter\\package.json","includedInParent":true,"mtime":1745002180389},{"name":"D:\\Programing\\starter\\node_modules\\stripe\\package.json","includedInParent":true,"mtime":1745002180303},{"name":"./utils","loc":{"line":3,"column":22,"index":37},"parent":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\makeRequest.js","resolved":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\utils.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./utils');\nfunction getRequestOpts(self, requestArgs, spec, overrideData) {\n  // Extract spec values with defaults.\n  var commandPath = utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n  var encode = spec.encode || function (data) {\n    return data;\n  };\n  var host = spec.host;\n  var path = self.createResourcePathWithSymbols(spec.path);\n\n  // Don't mutate args externally.\n  var args = [].slice.call(requestArgs);\n\n  // Generate and validate url params.\n  var urlData = urlParams.reduce(function (urlData, param) {\n    var arg = args.shift();\n    if (typeof arg !== 'string') {\n      throw new Error(\"Stripe: Argument \\\"\".concat(param, \"\\\" must be a string, but got: \").concat(arg, \" (on API request to `\").concat(requestMethod, \" \").concat(path, \"`)\"));\n    }\n    urlData[param] = arg;\n    return urlData;\n  }, {});\n\n  // Pull request data and options (headers, auth) from args.\n  var dataFromArgs = utils.getDataFromArgs(args);\n  var data = encode(Object.assign({}, dataFromArgs, overrideData));\n  var options = utils.getOptionsFromArgs(args);\n\n  // Validate that there are no more args.\n  if (args.length) {\n    throw new Error(\"Stripe: Unknown arguments (\".concat(args, \"). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to \").concat(requestMethod, \" `\").concat(path, \"`)\"));\n  }\n  var requestPath = self.createFullPath(commandPath, urlData);\n  var headers = Object.assign(options.headers, spec.headers);\n  if (spec.validator) {\n    spec.validator(data, {\n      headers: headers\n    });\n  }\n  return {\n    requestMethod: requestMethod,\n    requestPath: requestPath,\n    data: data,\n    auth: options.auth,\n    headers: headers,\n    host: host\n  };\n}\nfunction makeRequest(self, requestArgs, spec, overrideData) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var opts = getRequestOpts(self, requestArgs, spec, overrideData);\n    } catch (err) {\n      reject(err);\n      return;\n    }\n    function requestCallback(err, response) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n      }\n    }\n    self._request(opts.requestMethod, opts.host, opts.requestPath, opts.data, opts.auth, {\n      headers: opts.headers\n    }, requestCallback);\n  });\n}\nmodule.exports = makeRequest;"},"sourceMaps":null,"error":null,"hash":"94e9538c316d27d64e0d5d5afc577f44","cacheData":{"env":{}}}