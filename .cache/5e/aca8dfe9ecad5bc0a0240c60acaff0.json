{"id":"../../node_modules/parse-asn1/fixProc.js","dependencies":[{"name":"D:\\Programing\\starter\\package.json","includedInParent":true,"mtime":1745028222073},{"name":"D:\\Programing\\starter\\node_modules\\parse-asn1\\package.json","includedInParent":true,"mtime":1744662623295},{"name":"evp_bytestokey","loc":{"line":7,"column":18,"index":382},"parent":"D:\\Programing\\starter\\node_modules\\parse-asn1\\fixProc.js","resolved":"D:\\Programing\\starter\\node_modules\\evp_bytestokey\\index.js"},{"name":"browserify-aes","loc":{"line":8,"column":22,"index":423},"parent":"D:\\Programing\\starter\\node_modules\\parse-asn1\\fixProc.js","resolved":"D:\\Programing\\starter\\node_modules\\browserify-aes\\browser.js"},{"name":"safe-buffer","loc":{"line":9,"column":21,"index":463},"parent":"D:\\Programing\\starter\\node_modules\\parse-asn1\\fixProc.js","resolved":"D:\\Programing\\starter\\node_modules\\safe-buffer\\index.js"}],"generated":{"js":"\n'use strict';\n\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\nvar evp = require('evp_bytestokey');\nvar ciphers = require('browserify-aes');\nvar Buffer = require('safe-buffer').Buffer;\nmodule.exports = function (okey, password) {\n  var key = okey.toString();\n  var match = key.match(findProc);\n  var decrypted;\n  if (!match) {\n    var match2 = key.match(fullRegex);\n    decrypted = Buffer.from(match2[2].replace(/[\\r\\n]/g, ''), 'base64');\n  } else {\n    var suite = 'aes' + match[1];\n    var iv = Buffer.from(match[2], 'hex');\n    var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64');\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n    var out = [];\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n    out.push(cipher.update(cipherText));\n    out.push(cipher['final']());\n    decrypted = Buffer.concat(out);\n  }\n  var tag = key.match(startRegex)[1];\n  return {\n    tag: tag,\n    data: decrypted\n  };\n};"},"sourceMaps":null,"error":null,"hash":"88d38dbf1d5c319b74f2465111da9d7b","cacheData":{"env":{}}}