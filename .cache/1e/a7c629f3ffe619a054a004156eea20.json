{"id":"../../node_modules/stripe/lib/MultipartDataGenerator.js","dependencies":[{"name":"D:\\Programing\\starter\\package.json","includedInParent":true,"mtime":1745002180389},{"name":"D:\\Programing\\starter\\node_modules\\stripe\\package.json","includedInParent":true,"mtime":1745002180303},{"name":"safe-buffer","loc":{"line":3,"column":23,"index":38},"parent":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\MultipartDataGenerator.js","resolved":"D:\\Programing\\starter\\node_modules\\safe-buffer\\index.js"},{"name":"./utils","loc":{"line":4,"column":22,"index":83},"parent":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\MultipartDataGenerator.js","resolved":"D:\\Programing\\starter\\node_modules\\stripe\\lib\\utils.js"}],"generated":{"js":"\n'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar utils = require('./utils');\n\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nfunction multipartDataGenerator(method, data, headers) {\n  var segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = \"multipart/form-data; boundary=\".concat(segno);\n  var buffer = Buffer.alloc(0);\n  function push(l) {\n    var prevBuffer = buffer;\n    var newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n  function q(s) {\n    return \"\\\"\".concat(s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' '), \"\\\"\");\n  }\n  for (var k in utils.flattenAndStringify(data)) {\n    var v = data[k];\n    push(\"--\".concat(segno));\n    if (v.hasOwnProperty('data')) {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k), \"; filename=\").concat(q(v.name || 'blob')));\n      push(\"Content-Type: \".concat(v.type || 'application/octet-stream'));\n      push('');\n      push(v.data);\n    } else {\n      push(\"Content-Disposition: form-data; name=\".concat(q(k)));\n      push('');\n      push(v);\n    }\n  }\n  push(\"--\".concat(segno, \"--\"));\n  return buffer;\n}\nmodule.exports = multipartDataGenerator;"},"sourceMaps":null,"error":null,"hash":"5ec19222294a3488705df5bce909bff9","cacheData":{"env":{}}}